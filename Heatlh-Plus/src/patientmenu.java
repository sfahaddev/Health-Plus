


import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Amna
 */
public class patientmenu extends javax.swing.JFrame {
    
    ArrayList<Patient> allPatient= new ArrayList<>();
    
    public patientmenu() {
       initComponents();
        readAllData();
    }
     
   
    
   // Method to read all data from the file
  void readAllData(){
        try{
            // saving in the txt file we created
            File pfile= new File("patientdata.txt");
            Scanner scanner= new Scanner(pfile);
            
            while(scanner.hasNextLine()){
                String data = scanner.nextLine();
                //converting data
                String[] curdata=data.split(";");
                Patient patient = new Patient();
                
                patient.setId(Integer.parseInt(curdata[0]));
                patient.setName(curdata[1]);
                patient.setAge(Integer.parseInt(curdata[2]));
                patient.setGender(curdata[3]);
                patient.setContact(curdata[4]);
                patient.setAddress(curdata[5]);
                
                allPatient.add(patient);
                
                
            }
            scanner.close();
            
        }catch(Exception e){
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchpatient = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        patientid = new javax.swing.JLabel();
        patientname = new javax.swing.JLabel();
        patientage = new javax.swing.JLabel();
        patientgender = new javax.swing.JLabel();
        patcontact = new javax.swing.JLabel();
        pataddress = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        age = new javax.swing.JTextField();
        gender = new javax.swing.JTextField();
        address = new javax.swing.JTextField();
        contact = new javax.swing.JTextField();
        savebtnpatient = new javax.swing.JButton();
        nextbtnap1 = new javax.swing.JButton();
        homebtnaddpatient = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        bar = new javax.swing.JTextField();
        Searchbutton = new javax.swing.JButton();
        update = new javax.swing.JLabel();
        homebtn2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        updatetextarea = new javax.swing.JTextArea();
        savebtn3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        searchbar = new javax.swing.JTextField();
        homebtn3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        allpdata = new javax.swing.JTextArea();
        Searchbutton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchpatient.setBackground(new java.awt.Color(0, 102, 102));
        searchpatient.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchpatient.setForeground(new java.awt.Color(255, 255, 255));
        searchpatient.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N

        jPanel3.setPreferredSize(new java.awt.Dimension(750, 480));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        patientid.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        patientid.setForeground(new java.awt.Color(0, 102, 102));
        patientid.setText("ID");
        jPanel3.add(patientid, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 60, -1));

        patientname.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        patientname.setForeground(new java.awt.Color(0, 102, 102));
        patientname.setText("NAME");
        jPanel3.add(patientname, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 190, 50, -1));

        patientage.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        patientage.setForeground(new java.awt.Color(0, 102, 102));
        patientage.setText("AGE");
        jPanel3.add(patientage, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, -1, -1));

        patientgender.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        patientgender.setForeground(new java.awt.Color(0, 102, 102));
        patientgender.setText("GENDER");
        jPanel3.add(patientgender, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, -1, -1));

        patcontact.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        patcontact.setForeground(new java.awt.Color(0, 102, 102));
        patcontact.setText("CONTACT");
        jPanel3.add(patcontact, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, -1, -1));

        pataddress.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        pataddress.setForeground(new java.awt.Color(0, 102, 102));
        pataddress.setText("ADDRESS");
        jPanel3.add(pataddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 310, -1, -1));

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });
        jPanel3.add(id, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 160, 170, -1));
        jPanel3.add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 170, -1));
        jPanel3.add(age, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 220, 170, -1));
        jPanel3.add(gender, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 250, 170, -1));
        jPanel3.add(address, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 310, 170, -1));

        contact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactActionPerformed(evt);
            }
        });
        jPanel3.add(contact, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 280, 170, -1));

        savebtnpatient.setBackground(new java.awt.Color(0, 102, 102));
        savebtnpatient.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        savebtnpatient.setForeground(new java.awt.Color(255, 255, 255));
        savebtnpatient.setText("SAVE");
        savebtnpatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtnpatientActionPerformed(evt);
            }
        });
        jPanel3.add(savebtnpatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 360, 80, 30));

        nextbtnap1.setBackground(new java.awt.Color(0, 102, 102));
        nextbtnap1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        nextbtnap1.setForeground(new java.awt.Color(255, 255, 255));
        nextbtnap1.setText("NEXT");
        nextbtnap1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextbtnap1MouseClicked(evt);
            }
        });
        nextbtnap1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextbtnap1ActionPerformed(evt);
            }
        });
        jPanel3.add(nextbtnap1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 360, 80, 30));

        homebtnaddpatient.setBackground(new java.awt.Color(0, 102, 102));
        homebtnaddpatient.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homebtnaddpatient.setForeground(new java.awt.Color(255, 255, 255));
        homebtnaddpatient.setText("HOME");
        homebtnaddpatient.setBorder(null);
        homebtnaddpatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homebtnaddpatientMouseClicked(evt);
            }
        });
        jPanel3.add(homebtnaddpatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 360, 80, 30));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add.jpg"))); // NOI18N
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 450));

        searchpatient.addTab("ADD", jPanel3);

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barActionPerformed(evt);
            }
        });
        jPanel4.add(bar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 150, 210, -1));

        Searchbutton.setBackground(new java.awt.Color(0, 102, 102));
        Searchbutton.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Searchbutton.setForeground(new java.awt.Color(255, 255, 255));
        Searchbutton.setText("SEARCH");
        Searchbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchbuttonActionPerformed(evt);
            }
        });
        jPanel4.add(Searchbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 180, 140, 20));

        update.setBackground(new java.awt.Color(0, 102, 102));
        update.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        update.setForeground(new java.awt.Color(0, 102, 102));
        update.setText("SEARCH ID");
        jPanel4.add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 150, 80, 20));

        homebtn2.setBackground(new java.awt.Color(0, 102, 102));
        homebtn2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homebtn2.setForeground(new java.awt.Color(255, 255, 255));
        homebtn2.setText("HOME");
        homebtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homebtn2ActionPerformed(evt);
            }
        });
        jPanel4.add(homebtn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 380, 80, 30));

        updatetextarea.setColumns(20);
        updatetextarea.setRows(5);
        jScrollPane1.setViewportView(updatetextarea);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 340, 160));

        savebtn3.setBackground(new java.awt.Color(0, 102, 102));
        savebtn3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        savebtn3.setForeground(new java.awt.Color(255, 255, 255));
        savebtn3.setText("SAVE");
        savebtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtn3ActionPerformed(evt);
            }
        });
        jPanel4.add(savebtn3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 380, 80, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/update.jpg"))); // NOI18N
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 450));

        searchpatient.addTab("UPDATE", jPanel4);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 102));
        jLabel8.setText("SEARCH ID");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 90, 20));

        searchbar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbarActionPerformed(evt);
            }
        });
        jPanel2.add(searchbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, 220, -1));

        homebtn3.setBackground(new java.awt.Color(0, 102, 102));
        homebtn3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        homebtn3.setForeground(new java.awt.Color(255, 255, 255));
        homebtn3.setText("HOME");
        homebtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homebtn3ActionPerformed(evt);
            }
        });
        jPanel2.add(homebtn3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 370, 80, 30));

        allpdata.setColumns(20);
        allpdata.setRows(5);
        jScrollPane2.setViewportView(allpdata);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 310, 150));

        Searchbutton1.setBackground(new java.awt.Color(0, 102, 102));
        Searchbutton1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        Searchbutton1.setForeground(new java.awt.Color(255, 255, 255));
        Searchbutton1.setText("SEARCH");
        Searchbutton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Searchbutton1ActionPerformed(evt);
            }
        });
        jPanel2.add(Searchbutton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 180, 140, 20));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/search.jpg"))); // NOI18N
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 450));

        searchpatient.addTab("SEARCH", jPanel2);

        getContentPane().add(searchpatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed

       
    }//GEN-LAST:event_idActionPerformed

    private void homebtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homebtn3ActionPerformed
        // TODO add your handling code here:
        homepage homebtn3 = new homepage();
        this.setVisible(false);
        homebtn3.setVisible(true);
    }//GEN-LAST:event_homebtn3ActionPerformed

    private void homebtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homebtn2ActionPerformed
     //  int patientId = Integer.parseInt(patientIdField.getText());
        homepage homebtn2 = new homepage();
        this.setVisible(false);
        homebtn2.setVisible(true);
    }//GEN-LAST:event_homebtn2ActionPerformed

    private void nextbtnap1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextbtnap1MouseClicked
     String userIdStr = id.getText().trim(); // Get text from the id field and trim any leading/trailing whitespace
    if (userIdStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a valid ID.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    try {
        int userId = Integer.parseInt(userIdStr); // Parse the trimmed text to integer    
        // Assuming there is some method saveData() that returns true if saving is successful
        if (saveData()) { // Check if data saving was successful
            appointment appoint2 = new appointment(userId);
            this.setVisible(false);
            appoint2.setVisible(true); // Method to show appointment frame after successful save
        } else {
            JOptionPane.showMessageDialog(this, "Failed to save data. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid ID format. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
    }     
    }//GEN-LAST:event_nextbtnap1MouseClicked

    private void homebtnaddpatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homebtnaddpatientMouseClicked
        // TODO add your handling code here:
        homepage homebtn = new homepage();
        this.setVisible(false);
        homebtn.setVisible(true);
    }//GEN-LAST:event_homebtnaddpatientMouseClicked

    private void contactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactActionPerformed
    boolean checkIDC(){
        //if any vlaue already exist it will return true and show message
        for(int i=0; i<allPatient.size();i++){
            if(id.getText().equals(allPatient.get(i).getId()+"")|| contact.getText().equals(allPatient.get(i).getContact()+"")){
                return true;
            }
        }
        
        
        return false;
    }
   void saveAllData() {
    try {
        FileWriter filewriter = new FileWriter("patientdata.txt");

        for (int i = 0; i < allPatient.size(); i++) {
            filewriter.write(allPatient.get(i).getId() + ";" +
                    allPatient.get(i).getName() + ";" +
                    allPatient.get(i).getAge() + ";" +
                    allPatient.get(i).getGender() + ";" +
                    allPatient.get(i).getContact()+ ";" +
                    allPatient.get(i).getAddress()+ "\n"); // Add newline character after each patient's data
        }
        filewriter.close();

    } catch (Exception e) {
        e.printStackTrace(); // Print the stack trace to identify any potential errors
    }
}
 
private boolean validateId(String id) {
   return Pattern.matches("\\d+", id);
}
private boolean validateName(String name) {
    return Pattern.matches("[a-zA-Z\\s]+", name);
}

private boolean validateAge(String age) {
   return Pattern.matches("\\d+", age);
}
private boolean validateGender(String gender) {
       return Pattern.matches("male|female|m|f|Male|Female|MALE|FEMALE|M|F", gender);
    }
private boolean validateContact(String contact) {
  return Pattern.matches("\\d{11}", contact);
}

private boolean validateAddress(String address) {
    return Pattern.matches(".+", address);
}

    private void savebtnpatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtnpatientActionPerformed
   if (id.getText().isEmpty() || name.getText().isEmpty() || age.getText().isEmpty() || gender.getText().isEmpty() || address.getText().isEmpty() || contact.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields are required!");
        } else if (!validateId(id.getText())) {
            JOptionPane.showMessageDialog(null, "ID must be a valid number!");
        } else if (!validateName(name.getText())) {
            JOptionPane.showMessageDialog(null, "Name must contain only letters and spaces!");
        } else if (!validateAge(age.getText())) {
            JOptionPane.showMessageDialog(null, "Age must be a valid number!");
        } else if (!validateGender(gender.getText())) {
            JOptionPane.showMessageDialog(null, "Gender must be 'Male', 'Female','m' or 'f'!");
        } else if (!validateContact(contact.getText())) {
            JOptionPane.showMessageDialog(null, "Contact must be an 11-digit number!");
        } else if (!validateAddress(address.getText())) {
            JOptionPane.showMessageDialog(null, "Address cannot be empty!");
        } else if (checkIDC()) {
            JOptionPane.showMessageDialog(null, "ID or CONTACT already exists!");
        }
               else{
                   
                   try{
                       
                   
                   Patient patient = new Patient();
                    patient.setId(Integer.parseInt(id.getText()));
                patient.setName(name.getText());
                patient.setAge(Integer.parseInt(age.getText()));
                patient.setGender(gender.getText());
                patient.setContact(contact.getText());
                patient.setAddress(address.getText());
                allPatient.add(patient);
                
                //setting all to null after entring the save button
               // id.setText("");
                name.setText("");
                gender.setText("");
                age.setText("");
                contact.setText("");
                address.setText("");
                saveAllData();

                
                   }catch(Exception e){
                   JOptionPane.showMessageDialog(null, "ID and AGE must be integer!");
                   }
               }
    }//GEN-LAST:event_savebtnpatientActionPerformed

    public boolean saveData() {
        try (FileWriter file = new FileWriter("patientdata.txt")) {
            for (int i = 0; i < allPatient.size(); i++) {
                file.write(allPatient.get(i).getId() + ";" +
                           allPatient.get(i).getName() + ";" +
                           allPatient.get(i).getAge() + ";" +
                           allPatient.get(i).getGender() + ";" +
                           allPatient.get(i).getContact() + ";" +
                           allPatient.get(i).getAddress());
                
           
                    file.write(System.lineSeparator());
                
            }
            return true; // Return true if saving is successful
        } catch (IOException e) {
            e.printStackTrace(); // Handle or log the exception as per your application's needs
            return false; // Return false if saving fails
        }
    }
    
    private void SearchbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchbuttonActionPerformed

    int id = Integer.parseInt(bar.getText()); 
    boolean patientFound = false;
    updatetextarea.setText(""); 
    for (int i = 0; i < allPatient.size(); i++) {
        if (allPatient.get(i).getId() == id) {
            // Display patient details in the update text area
            updatetextarea.append(allPatient.get(i).getId() + "   " +
                                  allPatient.get(i).getName() + "   " +
                                  allPatient.get(i).getAge() + "   " +
                                  allPatient.get(i).getGender() + "   " +
                                  allPatient.get(i).getContact() + "   " +
                                  allPatient.get(i).getAddress() + "\n");
           
            patientFound = true;
            break;
        } 
    }
     if (!patientFound) {
        JOptionPane.showMessageDialog(this, "ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    }//GEN-LAST:event_SearchbuttonActionPerformed
           
    private void barActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barActionPerformed
         SearchbuttonActionPerformed(null);
        
    }//GEN-LAST:event_barActionPerformed
       
    private void Searchbutton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Searchbutton1ActionPerformed
        if(searchbar.getText().equals("")){
         JOptionPane.showMessageDialog(null, "ID is required!");
        }
        int id = Integer.parseInt(searchbar.getText());  
        boolean patientFound = false;
        allpdata.setText("");
        for (int i = 0; i < allPatient.size(); i++) {//linear search
            if (allPatient.get(i).getId() == id) {
                allpdata.append(allPatient.get(i).getId() + "   " +
                                            allPatient.get(i).getName() + "   " +
                                            allPatient.get(i).getAge() + "   " +
                                            allPatient.get(i).getGender() + "   " +
                                            allPatient.get(i).getContact() + "   " +
                                            allPatient.get(i).getAddress() + "\n");
            patientFound = true;
            break;
            }
}
            if(!patientFound){
                 JOptionPane.showMessageDialog(this, "ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_Searchbutton1ActionPerformed

    private void searchbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbarActionPerformed
          Searchbutton1ActionPerformed(null); // Trigger the search button action perform event
    }//GEN-LAST:event_searchbarActionPerformed
    void Updatepatientdata(){
        try {        
            String updatedText = updatetextarea.getText();
            String[] lines = updatedText.split("\\n");

            // Update the patient information in the ArrayList
            for (int i = 0; i < lines.length; i++) {
                String[] parts = lines[i].split("\\s+");
                int id = Integer.parseInt(parts[0]);
                String name = parts[1];
                int age = Integer.parseInt(parts[2]);
                String gender = parts[3];
                String contact = parts[4];
                String address = parts[5];

                //update patient information
                for (int j = 0; j < allPatient.size(); j++) {
                    if (allPatient.get(j).getId() == id) {
                        allPatient.get(j).setName(name);
                        allPatient.get(j).setAge(age);
                        allPatient.get(j).setGender(gender);
                        allPatient.get(j).setContact(contact);
                        allPatient.get(j).setAddress(address);
                    }
                }
            }

            // Save the updated data back to the file
            saveAllData();
            // Inform the user that the update was successful
            JOptionPane.showMessageDialog(this, "Patient updated Successfully!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid data format!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void savebtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtn3ActionPerformed
      Updatepatientdata();
    }//GEN-LAST:event_savebtn3ActionPerformed

    private void nextbtnap1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextbtnap1ActionPerformed
         
    }//GEN-LAST:event_nextbtnap1ActionPerformed
      
     
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(patientmenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(patientmenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(patientmenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(patientmenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new patientmenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Searchbutton;
    private javax.swing.JButton Searchbutton1;
    private javax.swing.JTextField address;
    private javax.swing.JTextField age;
    private javax.swing.JTextArea allpdata;
    private javax.swing.JTextField bar;
    private javax.swing.JTextField contact;
    private javax.swing.JTextField gender;
    private javax.swing.JButton homebtn2;
    private javax.swing.JButton homebtn3;
    private javax.swing.JButton homebtnaddpatient;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField name;
    private javax.swing.JButton nextbtnap1;
    private javax.swing.JLabel pataddress;
    private javax.swing.JLabel patcontact;
    private javax.swing.JLabel patientage;
    private javax.swing.JLabel patientgender;
    private javax.swing.JLabel patientid;
    private javax.swing.JLabel patientname;
    private javax.swing.JButton savebtn3;
    private javax.swing.JButton savebtnpatient;
    private javax.swing.JTextField searchbar;
    private javax.swing.JTabbedPane searchpatient;
    private javax.swing.JLabel update;
    private javax.swing.JTextArea updatetextarea;
    // End of variables declaration//GEN-END:variables

    
  
}
